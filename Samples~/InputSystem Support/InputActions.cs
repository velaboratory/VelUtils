//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.0
//     from Packages/com.franzco.unityutilities/Runtime/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if ENABLE_INPUT_SYSTEM
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace VelUtils
{
    public partial class @InputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Head"",
            ""id"": ""09ff3ccc-21b4-4346-a3a2-7c978b5af892"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""1a9029f8-7a46-46b9-9eff-e9ae8365f611"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""aed87fe6-2b01-4dd2-a8fa-195578fd8158"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""UserPresent"",
                    ""type"": ""Value"",
                    ""id"": ""e2d58715-017d-4edb-bf85-491d0422e5f4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cff1f981-6e1f-4e2c-a90c-715a0ea2e80e"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2017383-a3f6-4c46-acb1-012b8eece9cc"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b2c27bc-5d87-43cb-bc92-487dd5dc1a09"",
                    ""path"": ""<XRHMD>/userPresence"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UserPresent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Left"",
            ""id"": ""5fe596f9-1b7b-49b7-80a7-3b5195caf74d"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""83a7af0b-87e3-42c3-a909-95fbf8091e4f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""cb6b7130-2bac-4ef7-abe4-6991ae7d419d"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Value"",
                    ""id"": ""0c0991c5-d329-4afc-8892-1076b440477c"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Value"",
                    ""id"": ""33754c03-48ec-46ef-9bc6-22ed6bfdd8e8"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Vibrate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""664a62b0-e178-421d-b3f8-014eec01591d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""ThumbstickAxis"",
                    ""type"": ""Value"",
                    ""id"": ""cbeaf823-3b69-4004-8ec8-13ea2ca3fc31"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""ThumbstickLeft"",
                    ""type"": ""Value"",
                    ""id"": ""9a9600c5-237a-4d08-8924-2e11e0380a15"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""ThumbstickRight"",
                    ""type"": ""Value"",
                    ""id"": ""382a9c93-8187-443b-b0d3-1415fb009249"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""ThumbstickUp"",
                    ""type"": ""Value"",
                    ""id"": ""c99083a2-d6d7-4116-81bc-a9c5b99ba11e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""ThumbstickDown"",
                    ""type"": ""Value"",
                    ""id"": ""01302b6b-4aa6-4cf7-9c94-b83a2648ba80"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""ThumbstickPress"",
                    ""type"": ""Button"",
                    ""id"": ""a21db72c-4843-4839-b4d0-3ce8d287cb86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Button1"",
                    ""type"": ""Button"",
                    ""id"": ""89ce8348-6001-41a3-85b9-f8f2e2dcad7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Button2"",
                    ""type"": ""Button"",
                    ""id"": ""9164e093-ebd4-4923-af32-1b52f31c2d66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Velocity"",
                    ""type"": ""Value"",
                    ""id"": ""b5445a5f-713e-4ae2-a8d6-e61c824a335a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""AngularVelocity"",
                    ""type"": ""Value"",
                    ""id"": ""44aaccd9-12e7-4ad3-a83c-a92c6aa41dad"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""Value"",
                    ""id"": ""d88ab06f-dc5b-4868-8f0c-98fd89409322"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b8edee81-6779-4aa8-89cd-29b149a8f55e"",
                    ""path"": ""<XRController>{LeftHand}/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""ThumbstickPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8aebee7-fa03-43d4-bfb7-77a3f87452cc"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Button1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14a27f53-867e-4d15-92d9-3e36deb55b1b"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.01,max=0.99)"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""ThumbstickAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71a4d23f-3e9a-4513-923b-ba388c5e84bf"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acdf9550-5529-4ff7-8558-73ecdf0d75bd"",
                    ""path"": ""<XRController>{LeftHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Vibrate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""487f4f2e-9e9b-49aa-b0f2-4037a24624f5"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f2cf564-6bdd-4ac8-ab2b-f1f4d819a957"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Button2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58f2b10b-69a6-4e0b-8152-7ebf3efa396e"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxis"",
                    ""interactions"": ""Sector(directions=8,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""ThumbstickLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1bc7da6b-6d4b-4f30-a167-052ff15b7fc1"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxis"",
                    ""interactions"": ""Sector(directions=4,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""ThumbstickRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""714b16df-7cb2-41ef-9c5a-d9f75b475eee"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxis"",
                    ""interactions"": ""Sector(directions=1,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""ThumbstickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ddafda7-f049-47ff-8263-5506806f34d9"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxis"",
                    ""interactions"": ""Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""ThumbstickDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""751c6bee-cca3-437b-950f-2dcada375332"",
                    ""path"": ""<XRController>{LeftHand}/deviceVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53e7247a-215b-42b9-9b37-0b1270883b58"",
                    ""path"": ""<XRController>{LeftHand}/deviceAngularVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""AngularVelocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8a9de2d-4a37-4455-9687-72d0b4e060da"",
                    ""path"": ""<XRController>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e191ef8-9cfd-41e5-9f77-1e7653f2c403"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9dc1b21b-868c-4826-8a1b-3a6cc8e8eab4"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Right"",
            ""id"": ""1628bba8-71e0-4457-abd0-a83516eed232"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""096fd127-5827-4e22-8c40-9213ab805383"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""c24ffbcc-3fe3-4fa6-b473-1a8e110cac8a"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Value"",
                    ""id"": ""c51c4c23-ce9b-4468-b1ad-407a46c72a54"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Value"",
                    ""id"": ""b3448f66-e148-496d-b66e-c2614f1a5ecb"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Vibrate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""02493d66-b770-45fb-b53c-c7b5f9b342b3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""ThumbstickAxis"",
                    ""type"": ""Value"",
                    ""id"": ""7b304301-13f9-401f-babf-7ec5cd80383d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""ThumbstickLeft"",
                    ""type"": ""Value"",
                    ""id"": ""d96ce9fc-a6a7-4722-af73-321c429bd67f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""ThumbstickRight"",
                    ""type"": ""Value"",
                    ""id"": ""33096818-cf37-44ea-ae5c-2cc6a0cc6989"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""ThumbstickUp"",
                    ""type"": ""Value"",
                    ""id"": ""2660b2dc-c874-4155-bc1d-86adb2557bc1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""ThumbstickDown"",
                    ""type"": ""Value"",
                    ""id"": ""43221fdc-0f44-476e-881d-1f102ac4b9f4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""ThumbstickPress"",
                    ""type"": ""Button"",
                    ""id"": ""2f3f565c-db32-49dd-9b11-fbf9989a28b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Button1"",
                    ""type"": ""Button"",
                    ""id"": ""34d472c5-14a3-4b18-b979-61914bf09696"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Button2"",
                    ""type"": ""Button"",
                    ""id"": ""b3cdba90-a184-4f9c-95af-ff0744b154a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Velocity"",
                    ""type"": ""Value"",
                    ""id"": ""0a2a492f-2132-40d1-a34e-63aba8ddf079"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""AngularVelocity"",
                    ""type"": ""Value"",
                    ""id"": ""a16771c8-f366-40ba-8d11-c4763d80af86"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""Value"",
                    ""id"": ""8ccb9409-3b8a-4e06-bd4a-dc17028c3ac6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""111f61d9-aece-4e17-9b66-5e2130bc540f"",
                    ""path"": ""<XRController>{RightHand}/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""ThumbstickPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b0867c2-64b8-4cd6-8c84-6e3cba5be9af"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Button1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30c5aa20-b1f5-4cd3-b5e2-f31391ba6b76"",
                    ""path"": ""<XRController>{RightHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.01,max=0.99)"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""ThumbstickAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c184c94-b3dc-4c50-bfd6-340a04ccabaa"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43c44268-6197-4fda-9bf1-58d2df4be76e"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""879ea44a-c9e7-49d1-88bf-2a139028420e"",
                    ""path"": ""<XRController>{RightHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Vibrate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4dd05d29-78f9-4158-ab33-17607964fe2c"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7739b60b-eeb9-4323-898d-04e08fdc89af"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Button2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b15c66df-d447-4728-b3a7-caba883e4bd5"",
                    ""path"": ""<XRController>{RightHand}/primary2DAxis"",
                    ""interactions"": ""Sector(directions=8,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""ThumbstickLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d3b3c28-402a-4f81-950c-5a3ebd2079b7"",
                    ""path"": ""<XRController>{RightHand}/primary2DAxis"",
                    ""interactions"": ""Sector(directions=4,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""ThumbstickRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48859988-8b0e-42a8-8685-4b6b0f78e55c"",
                    ""path"": ""<XRController>{RightHand}/primary2DAxis"",
                    ""interactions"": ""Sector(directions=1,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""ThumbstickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2e59c6d-b94f-4f53-89fb-0ecdbba5af67"",
                    ""path"": ""<XRController>{RightHand}/primary2DAxis"",
                    ""interactions"": ""Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""ThumbstickDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1852ae68-16bb-4d6d-913e-3fab295aa998"",
                    ""path"": ""<XRController>{RightHand}/deviceVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48c96d4a-7cf7-4713-996a-d63405a804ae"",
                    ""path"": ""<XRController>{RightHand}/deviceAngularVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""AngularVelocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7824f2db-8b7a-4e43-9593-6bac2a25748f"",
                    ""path"": ""<XRController>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a545fec5-4d18-4d71-8534-a8cecd8f6353"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Generic XR Controller"",
            ""bindingGroup"": ""Generic XR Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<WMRHMD>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Head
            m_Head = asset.FindActionMap("Head", throwIfNotFound: true);
            m_Head_Position = m_Head.FindAction("Position", throwIfNotFound: true);
            m_Head_Rotation = m_Head.FindAction("Rotation", throwIfNotFound: true);
            m_Head_UserPresent = m_Head.FindAction("UserPresent", throwIfNotFound: true);
            // Left
            m_Left = asset.FindActionMap("Left", throwIfNotFound: true);
            m_Left_Position = m_Left.FindAction("Position", throwIfNotFound: true);
            m_Left_Rotation = m_Left.FindAction("Rotation", throwIfNotFound: true);
            m_Left_Trigger = m_Left.FindAction("Trigger", throwIfNotFound: true);
            m_Left_Grip = m_Left.FindAction("Grip", throwIfNotFound: true);
            m_Left_Vibrate = m_Left.FindAction("Vibrate", throwIfNotFound: true);
            m_Left_ThumbstickAxis = m_Left.FindAction("ThumbstickAxis", throwIfNotFound: true);
            m_Left_ThumbstickLeft = m_Left.FindAction("ThumbstickLeft", throwIfNotFound: true);
            m_Left_ThumbstickRight = m_Left.FindAction("ThumbstickRight", throwIfNotFound: true);
            m_Left_ThumbstickUp = m_Left.FindAction("ThumbstickUp", throwIfNotFound: true);
            m_Left_ThumbstickDown = m_Left.FindAction("ThumbstickDown", throwIfNotFound: true);
            m_Left_ThumbstickPress = m_Left.FindAction("ThumbstickPress", throwIfNotFound: true);
            m_Left_Button1 = m_Left.FindAction("Button1", throwIfNotFound: true);
            m_Left_Button2 = m_Left.FindAction("Button2", throwIfNotFound: true);
            m_Left_Velocity = m_Left.FindAction("Velocity", throwIfNotFound: true);
            m_Left_AngularVelocity = m_Left.FindAction("AngularVelocity", throwIfNotFound: true);
            m_Left_IsTracked = m_Left.FindAction("IsTracked", throwIfNotFound: true);
            // Right
            m_Right = asset.FindActionMap("Right", throwIfNotFound: true);
            m_Right_Position = m_Right.FindAction("Position", throwIfNotFound: true);
            m_Right_Rotation = m_Right.FindAction("Rotation", throwIfNotFound: true);
            m_Right_Trigger = m_Right.FindAction("Trigger", throwIfNotFound: true);
            m_Right_Grip = m_Right.FindAction("Grip", throwIfNotFound: true);
            m_Right_Vibrate = m_Right.FindAction("Vibrate", throwIfNotFound: true);
            m_Right_ThumbstickAxis = m_Right.FindAction("ThumbstickAxis", throwIfNotFound: true);
            m_Right_ThumbstickLeft = m_Right.FindAction("ThumbstickLeft", throwIfNotFound: true);
            m_Right_ThumbstickRight = m_Right.FindAction("ThumbstickRight", throwIfNotFound: true);
            m_Right_ThumbstickUp = m_Right.FindAction("ThumbstickUp", throwIfNotFound: true);
            m_Right_ThumbstickDown = m_Right.FindAction("ThumbstickDown", throwIfNotFound: true);
            m_Right_ThumbstickPress = m_Right.FindAction("ThumbstickPress", throwIfNotFound: true);
            m_Right_Button1 = m_Right.FindAction("Button1", throwIfNotFound: true);
            m_Right_Button2 = m_Right.FindAction("Button2", throwIfNotFound: true);
            m_Right_Velocity = m_Right.FindAction("Velocity", throwIfNotFound: true);
            m_Right_AngularVelocity = m_Right.FindAction("AngularVelocity", throwIfNotFound: true);
            m_Right_IsTracked = m_Right.FindAction("IsTracked", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Head
        private readonly InputActionMap m_Head;
        private IHeadActions m_HeadActionsCallbackInterface;
        private readonly InputAction m_Head_Position;
        private readonly InputAction m_Head_Rotation;
        private readonly InputAction m_Head_UserPresent;
        public struct HeadActions
        {
            private @InputActions m_Wrapper;
            public HeadActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_Head_Position;
            public InputAction @Rotation => m_Wrapper.m_Head_Rotation;
            public InputAction @UserPresent => m_Wrapper.m_Head_UserPresent;
            public InputActionMap Get() { return m_Wrapper.m_Head; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HeadActions set) { return set.Get(); }
            public void SetCallbacks(IHeadActions instance)
            {
                if (m_Wrapper.m_HeadActionsCallbackInterface != null)
                {
                    @Position.started -= m_Wrapper.m_HeadActionsCallbackInterface.OnPosition;
                    @Position.performed -= m_Wrapper.m_HeadActionsCallbackInterface.OnPosition;
                    @Position.canceled -= m_Wrapper.m_HeadActionsCallbackInterface.OnPosition;
                    @Rotation.started -= m_Wrapper.m_HeadActionsCallbackInterface.OnRotation;
                    @Rotation.performed -= m_Wrapper.m_HeadActionsCallbackInterface.OnRotation;
                    @Rotation.canceled -= m_Wrapper.m_HeadActionsCallbackInterface.OnRotation;
                    @UserPresent.started -= m_Wrapper.m_HeadActionsCallbackInterface.OnUserPresent;
                    @UserPresent.performed -= m_Wrapper.m_HeadActionsCallbackInterface.OnUserPresent;
                    @UserPresent.canceled -= m_Wrapper.m_HeadActionsCallbackInterface.OnUserPresent;
                }
                m_Wrapper.m_HeadActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Position.started += instance.OnPosition;
                    @Position.performed += instance.OnPosition;
                    @Position.canceled += instance.OnPosition;
                    @Rotation.started += instance.OnRotation;
                    @Rotation.performed += instance.OnRotation;
                    @Rotation.canceled += instance.OnRotation;
                    @UserPresent.started += instance.OnUserPresent;
                    @UserPresent.performed += instance.OnUserPresent;
                    @UserPresent.canceled += instance.OnUserPresent;
                }
            }
        }
        public HeadActions @Head => new HeadActions(this);

        // Left
        private readonly InputActionMap m_Left;
        private ILeftActions m_LeftActionsCallbackInterface;
        private readonly InputAction m_Left_Position;
        private readonly InputAction m_Left_Rotation;
        private readonly InputAction m_Left_Trigger;
        private readonly InputAction m_Left_Grip;
        private readonly InputAction m_Left_Vibrate;
        private readonly InputAction m_Left_ThumbstickAxis;
        private readonly InputAction m_Left_ThumbstickLeft;
        private readonly InputAction m_Left_ThumbstickRight;
        private readonly InputAction m_Left_ThumbstickUp;
        private readonly InputAction m_Left_ThumbstickDown;
        private readonly InputAction m_Left_ThumbstickPress;
        private readonly InputAction m_Left_Button1;
        private readonly InputAction m_Left_Button2;
        private readonly InputAction m_Left_Velocity;
        private readonly InputAction m_Left_AngularVelocity;
        private readonly InputAction m_Left_IsTracked;
        public struct LeftActions
        {
            private @InputActions m_Wrapper;
            public LeftActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_Left_Position;
            public InputAction @Rotation => m_Wrapper.m_Left_Rotation;
            public InputAction @Trigger => m_Wrapper.m_Left_Trigger;
            public InputAction @Grip => m_Wrapper.m_Left_Grip;
            public InputAction @Vibrate => m_Wrapper.m_Left_Vibrate;
            public InputAction @ThumbstickAxis => m_Wrapper.m_Left_ThumbstickAxis;
            public InputAction @ThumbstickLeft => m_Wrapper.m_Left_ThumbstickLeft;
            public InputAction @ThumbstickRight => m_Wrapper.m_Left_ThumbstickRight;
            public InputAction @ThumbstickUp => m_Wrapper.m_Left_ThumbstickUp;
            public InputAction @ThumbstickDown => m_Wrapper.m_Left_ThumbstickDown;
            public InputAction @ThumbstickPress => m_Wrapper.m_Left_ThumbstickPress;
            public InputAction @Button1 => m_Wrapper.m_Left_Button1;
            public InputAction @Button2 => m_Wrapper.m_Left_Button2;
            public InputAction @Velocity => m_Wrapper.m_Left_Velocity;
            public InputAction @AngularVelocity => m_Wrapper.m_Left_AngularVelocity;
            public InputAction @IsTracked => m_Wrapper.m_Left_IsTracked;
            public InputActionMap Get() { return m_Wrapper.m_Left; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LeftActions set) { return set.Get(); }
            public void SetCallbacks(ILeftActions instance)
            {
                if (m_Wrapper.m_LeftActionsCallbackInterface != null)
                {
                    @Position.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnPosition;
                    @Position.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnPosition;
                    @Position.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnPosition;
                    @Rotation.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnRotation;
                    @Rotation.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnRotation;
                    @Rotation.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnRotation;
                    @Trigger.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnTrigger;
                    @Trigger.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnTrigger;
                    @Trigger.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnTrigger;
                    @Grip.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnGrip;
                    @Grip.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnGrip;
                    @Grip.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnGrip;
                    @Vibrate.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnVibrate;
                    @Vibrate.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnVibrate;
                    @Vibrate.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnVibrate;
                    @ThumbstickAxis.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickAxis;
                    @ThumbstickAxis.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickAxis;
                    @ThumbstickAxis.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickAxis;
                    @ThumbstickLeft.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickLeft;
                    @ThumbstickLeft.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickLeft;
                    @ThumbstickLeft.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickLeft;
                    @ThumbstickRight.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickRight;
                    @ThumbstickRight.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickRight;
                    @ThumbstickRight.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickRight;
                    @ThumbstickUp.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickUp;
                    @ThumbstickUp.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickUp;
                    @ThumbstickUp.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickUp;
                    @ThumbstickDown.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickDown;
                    @ThumbstickDown.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickDown;
                    @ThumbstickDown.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickDown;
                    @ThumbstickPress.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickPress;
                    @ThumbstickPress.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickPress;
                    @ThumbstickPress.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnThumbstickPress;
                    @Button1.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnButton1;
                    @Button1.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnButton1;
                    @Button1.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnButton1;
                    @Button2.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnButton2;
                    @Button2.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnButton2;
                    @Button2.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnButton2;
                    @Velocity.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnVelocity;
                    @Velocity.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnVelocity;
                    @Velocity.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnVelocity;
                    @AngularVelocity.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnAngularVelocity;
                    @AngularVelocity.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnAngularVelocity;
                    @AngularVelocity.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnAngularVelocity;
                    @IsTracked.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnIsTracked;
                    @IsTracked.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnIsTracked;
                    @IsTracked.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnIsTracked;
                }
                m_Wrapper.m_LeftActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Position.started += instance.OnPosition;
                    @Position.performed += instance.OnPosition;
                    @Position.canceled += instance.OnPosition;
                    @Rotation.started += instance.OnRotation;
                    @Rotation.performed += instance.OnRotation;
                    @Rotation.canceled += instance.OnRotation;
                    @Trigger.started += instance.OnTrigger;
                    @Trigger.performed += instance.OnTrigger;
                    @Trigger.canceled += instance.OnTrigger;
                    @Grip.started += instance.OnGrip;
                    @Grip.performed += instance.OnGrip;
                    @Grip.canceled += instance.OnGrip;
                    @Vibrate.started += instance.OnVibrate;
                    @Vibrate.performed += instance.OnVibrate;
                    @Vibrate.canceled += instance.OnVibrate;
                    @ThumbstickAxis.started += instance.OnThumbstickAxis;
                    @ThumbstickAxis.performed += instance.OnThumbstickAxis;
                    @ThumbstickAxis.canceled += instance.OnThumbstickAxis;
                    @ThumbstickLeft.started += instance.OnThumbstickLeft;
                    @ThumbstickLeft.performed += instance.OnThumbstickLeft;
                    @ThumbstickLeft.canceled += instance.OnThumbstickLeft;
                    @ThumbstickRight.started += instance.OnThumbstickRight;
                    @ThumbstickRight.performed += instance.OnThumbstickRight;
                    @ThumbstickRight.canceled += instance.OnThumbstickRight;
                    @ThumbstickUp.started += instance.OnThumbstickUp;
                    @ThumbstickUp.performed += instance.OnThumbstickUp;
                    @ThumbstickUp.canceled += instance.OnThumbstickUp;
                    @ThumbstickDown.started += instance.OnThumbstickDown;
                    @ThumbstickDown.performed += instance.OnThumbstickDown;
                    @ThumbstickDown.canceled += instance.OnThumbstickDown;
                    @ThumbstickPress.started += instance.OnThumbstickPress;
                    @ThumbstickPress.performed += instance.OnThumbstickPress;
                    @ThumbstickPress.canceled += instance.OnThumbstickPress;
                    @Button1.started += instance.OnButton1;
                    @Button1.performed += instance.OnButton1;
                    @Button1.canceled += instance.OnButton1;
                    @Button2.started += instance.OnButton2;
                    @Button2.performed += instance.OnButton2;
                    @Button2.canceled += instance.OnButton2;
                    @Velocity.started += instance.OnVelocity;
                    @Velocity.performed += instance.OnVelocity;
                    @Velocity.canceled += instance.OnVelocity;
                    @AngularVelocity.started += instance.OnAngularVelocity;
                    @AngularVelocity.performed += instance.OnAngularVelocity;
                    @AngularVelocity.canceled += instance.OnAngularVelocity;
                    @IsTracked.started += instance.OnIsTracked;
                    @IsTracked.performed += instance.OnIsTracked;
                    @IsTracked.canceled += instance.OnIsTracked;
                }
            }
        }
        public LeftActions @Left => new LeftActions(this);

        // Right
        private readonly InputActionMap m_Right;
        private IRightActions m_RightActionsCallbackInterface;
        private readonly InputAction m_Right_Position;
        private readonly InputAction m_Right_Rotation;
        private readonly InputAction m_Right_Trigger;
        private readonly InputAction m_Right_Grip;
        private readonly InputAction m_Right_Vibrate;
        private readonly InputAction m_Right_ThumbstickAxis;
        private readonly InputAction m_Right_ThumbstickLeft;
        private readonly InputAction m_Right_ThumbstickRight;
        private readonly InputAction m_Right_ThumbstickUp;
        private readonly InputAction m_Right_ThumbstickDown;
        private readonly InputAction m_Right_ThumbstickPress;
        private readonly InputAction m_Right_Button1;
        private readonly InputAction m_Right_Button2;
        private readonly InputAction m_Right_Velocity;
        private readonly InputAction m_Right_AngularVelocity;
        private readonly InputAction m_Right_IsTracked;
        public struct RightActions
        {
            private @InputActions m_Wrapper;
            public RightActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_Right_Position;
            public InputAction @Rotation => m_Wrapper.m_Right_Rotation;
            public InputAction @Trigger => m_Wrapper.m_Right_Trigger;
            public InputAction @Grip => m_Wrapper.m_Right_Grip;
            public InputAction @Vibrate => m_Wrapper.m_Right_Vibrate;
            public InputAction @ThumbstickAxis => m_Wrapper.m_Right_ThumbstickAxis;
            public InputAction @ThumbstickLeft => m_Wrapper.m_Right_ThumbstickLeft;
            public InputAction @ThumbstickRight => m_Wrapper.m_Right_ThumbstickRight;
            public InputAction @ThumbstickUp => m_Wrapper.m_Right_ThumbstickUp;
            public InputAction @ThumbstickDown => m_Wrapper.m_Right_ThumbstickDown;
            public InputAction @ThumbstickPress => m_Wrapper.m_Right_ThumbstickPress;
            public InputAction @Button1 => m_Wrapper.m_Right_Button1;
            public InputAction @Button2 => m_Wrapper.m_Right_Button2;
            public InputAction @Velocity => m_Wrapper.m_Right_Velocity;
            public InputAction @AngularVelocity => m_Wrapper.m_Right_AngularVelocity;
            public InputAction @IsTracked => m_Wrapper.m_Right_IsTracked;
            public InputActionMap Get() { return m_Wrapper.m_Right; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(RightActions set) { return set.Get(); }
            public void SetCallbacks(IRightActions instance)
            {
                if (m_Wrapper.m_RightActionsCallbackInterface != null)
                {
                    @Position.started -= m_Wrapper.m_RightActionsCallbackInterface.OnPosition;
                    @Position.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnPosition;
                    @Position.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnPosition;
                    @Rotation.started -= m_Wrapper.m_RightActionsCallbackInterface.OnRotation;
                    @Rotation.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnRotation;
                    @Rotation.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnRotation;
                    @Trigger.started -= m_Wrapper.m_RightActionsCallbackInterface.OnTrigger;
                    @Trigger.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnTrigger;
                    @Trigger.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnTrigger;
                    @Grip.started -= m_Wrapper.m_RightActionsCallbackInterface.OnGrip;
                    @Grip.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnGrip;
                    @Grip.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnGrip;
                    @Vibrate.started -= m_Wrapper.m_RightActionsCallbackInterface.OnVibrate;
                    @Vibrate.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnVibrate;
                    @Vibrate.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnVibrate;
                    @ThumbstickAxis.started -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickAxis;
                    @ThumbstickAxis.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickAxis;
                    @ThumbstickAxis.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickAxis;
                    @ThumbstickLeft.started -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickLeft;
                    @ThumbstickLeft.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickLeft;
                    @ThumbstickLeft.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickLeft;
                    @ThumbstickRight.started -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickRight;
                    @ThumbstickRight.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickRight;
                    @ThumbstickRight.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickRight;
                    @ThumbstickUp.started -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickUp;
                    @ThumbstickUp.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickUp;
                    @ThumbstickUp.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickUp;
                    @ThumbstickDown.started -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickDown;
                    @ThumbstickDown.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickDown;
                    @ThumbstickDown.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickDown;
                    @ThumbstickPress.started -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickPress;
                    @ThumbstickPress.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickPress;
                    @ThumbstickPress.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnThumbstickPress;
                    @Button1.started -= m_Wrapper.m_RightActionsCallbackInterface.OnButton1;
                    @Button1.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnButton1;
                    @Button1.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnButton1;
                    @Button2.started -= m_Wrapper.m_RightActionsCallbackInterface.OnButton2;
                    @Button2.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnButton2;
                    @Button2.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnButton2;
                    @Velocity.started -= m_Wrapper.m_RightActionsCallbackInterface.OnVelocity;
                    @Velocity.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnVelocity;
                    @Velocity.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnVelocity;
                    @AngularVelocity.started -= m_Wrapper.m_RightActionsCallbackInterface.OnAngularVelocity;
                    @AngularVelocity.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnAngularVelocity;
                    @AngularVelocity.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnAngularVelocity;
                    @IsTracked.started -= m_Wrapper.m_RightActionsCallbackInterface.OnIsTracked;
                    @IsTracked.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnIsTracked;
                    @IsTracked.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnIsTracked;
                }
                m_Wrapper.m_RightActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Position.started += instance.OnPosition;
                    @Position.performed += instance.OnPosition;
                    @Position.canceled += instance.OnPosition;
                    @Rotation.started += instance.OnRotation;
                    @Rotation.performed += instance.OnRotation;
                    @Rotation.canceled += instance.OnRotation;
                    @Trigger.started += instance.OnTrigger;
                    @Trigger.performed += instance.OnTrigger;
                    @Trigger.canceled += instance.OnTrigger;
                    @Grip.started += instance.OnGrip;
                    @Grip.performed += instance.OnGrip;
                    @Grip.canceled += instance.OnGrip;
                    @Vibrate.started += instance.OnVibrate;
                    @Vibrate.performed += instance.OnVibrate;
                    @Vibrate.canceled += instance.OnVibrate;
                    @ThumbstickAxis.started += instance.OnThumbstickAxis;
                    @ThumbstickAxis.performed += instance.OnThumbstickAxis;
                    @ThumbstickAxis.canceled += instance.OnThumbstickAxis;
                    @ThumbstickLeft.started += instance.OnThumbstickLeft;
                    @ThumbstickLeft.performed += instance.OnThumbstickLeft;
                    @ThumbstickLeft.canceled += instance.OnThumbstickLeft;
                    @ThumbstickRight.started += instance.OnThumbstickRight;
                    @ThumbstickRight.performed += instance.OnThumbstickRight;
                    @ThumbstickRight.canceled += instance.OnThumbstickRight;
                    @ThumbstickUp.started += instance.OnThumbstickUp;
                    @ThumbstickUp.performed += instance.OnThumbstickUp;
                    @ThumbstickUp.canceled += instance.OnThumbstickUp;
                    @ThumbstickDown.started += instance.OnThumbstickDown;
                    @ThumbstickDown.performed += instance.OnThumbstickDown;
                    @ThumbstickDown.canceled += instance.OnThumbstickDown;
                    @ThumbstickPress.started += instance.OnThumbstickPress;
                    @ThumbstickPress.performed += instance.OnThumbstickPress;
                    @ThumbstickPress.canceled += instance.OnThumbstickPress;
                    @Button1.started += instance.OnButton1;
                    @Button1.performed += instance.OnButton1;
                    @Button1.canceled += instance.OnButton1;
                    @Button2.started += instance.OnButton2;
                    @Button2.performed += instance.OnButton2;
                    @Button2.canceled += instance.OnButton2;
                    @Velocity.started += instance.OnVelocity;
                    @Velocity.performed += instance.OnVelocity;
                    @Velocity.canceled += instance.OnVelocity;
                    @AngularVelocity.started += instance.OnAngularVelocity;
                    @AngularVelocity.performed += instance.OnAngularVelocity;
                    @AngularVelocity.canceled += instance.OnAngularVelocity;
                    @IsTracked.started += instance.OnIsTracked;
                    @IsTracked.performed += instance.OnIsTracked;
                    @IsTracked.canceled += instance.OnIsTracked;
                }
            }
        }
        public RightActions @Right => new RightActions(this);
        private int m_GenericXRControllerSchemeIndex = -1;
        public InputControlScheme GenericXRControllerScheme
        {
            get
            {
                if (m_GenericXRControllerSchemeIndex == -1) m_GenericXRControllerSchemeIndex = asset.FindControlSchemeIndex("Generic XR Controller");
                return asset.controlSchemes[m_GenericXRControllerSchemeIndex];
            }
        }
        public interface IHeadActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnUserPresent(InputAction.CallbackContext context);
        }
        public interface ILeftActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnTrigger(InputAction.CallbackContext context);
            void OnGrip(InputAction.CallbackContext context);
            void OnVibrate(InputAction.CallbackContext context);
            void OnThumbstickAxis(InputAction.CallbackContext context);
            void OnThumbstickLeft(InputAction.CallbackContext context);
            void OnThumbstickRight(InputAction.CallbackContext context);
            void OnThumbstickUp(InputAction.CallbackContext context);
            void OnThumbstickDown(InputAction.CallbackContext context);
            void OnThumbstickPress(InputAction.CallbackContext context);
            void OnButton1(InputAction.CallbackContext context);
            void OnButton2(InputAction.CallbackContext context);
            void OnVelocity(InputAction.CallbackContext context);
            void OnAngularVelocity(InputAction.CallbackContext context);
            void OnIsTracked(InputAction.CallbackContext context);
        }
        public interface IRightActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnTrigger(InputAction.CallbackContext context);
            void OnGrip(InputAction.CallbackContext context);
            void OnVibrate(InputAction.CallbackContext context);
            void OnThumbstickAxis(InputAction.CallbackContext context);
            void OnThumbstickLeft(InputAction.CallbackContext context);
            void OnThumbstickRight(InputAction.CallbackContext context);
            void OnThumbstickUp(InputAction.CallbackContext context);
            void OnThumbstickDown(InputAction.CallbackContext context);
            void OnThumbstickPress(InputAction.CallbackContext context);
            void OnButton1(InputAction.CallbackContext context);
            void OnButton2(InputAction.CallbackContext context);
            void OnVelocity(InputAction.CallbackContext context);
            void OnAngularVelocity(InputAction.CallbackContext context);
            void OnIsTracked(InputAction.CallbackContext context);
        }
    }
}
#endif